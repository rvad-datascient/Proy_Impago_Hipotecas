# -*- coding: utf-8 -*-
"""4.Preprocesamiento.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EoKiVOaMPDU_4SVaVX1EzuVWIFV0knbd
"""

#@title 4. Preprocesamiento datos Credit failure prediction

import numpy as np
import pandas as pd
from sklearn.preprocessing import RobustScaler
from imblearn.over_sampling import SMOTE

def winsorizar(df, columnas, p_inferior=0.01, p_superior=0.99):
    """
    Aplica winsorización por percentiles a las columnas numéricas indicadas.
    """
    df = df.copy()
    for col in columnas:
        lower = df[col].quantile(p_inferior)
        upper = df[col].quantile(p_superior)
        df[col] = np.clip(df[col], lower, upper)
    return df

def preprocesar_datos(X_train, X_test, y_train, columnas_winsor):
    """
    Aplica winsorización, escalado robusto y SMOTE sobre el conjunto de datos.

    Parámetros:
    - X_train, X_test: features
    - y_train: etiquetas del conjunto de entrenamiento
    - columnas_winsor: lista de columnas numéricas a winsorizar

    Retorna:
    - X_train_final, y_train_final: datos preprocesados y balanceados (train)
    - X_test_scaled, y_test: datos escalados (test)
    """
    # 1. Winsorizar
    X_train_winsor = winsorizar(X_train.copy(), columnas_winsor)
    X_test_winsor = winsorizar(X_test.copy(), columnas_winsor)

    # 2. Escalado
    scaler = RobustScaler()
    X_train_scaled = scaler.fit_transform(X_train_winsor)
    X_test_scaled = scaler.transform(X_test_winsor)

    # 3. Aplicar SMOTE solo en train
    smote = SMOTE(random_state=42)
    X_train_final, y_train_final = smote.fit_resample(X_train_scaled, y_train)

    # 4. Info
    print("Preprocesamiento completado:")
    print(f"X_train_final shape: {X_train_final.shape}")
    print(f"y_train_final: {np.bincount(y_train_final)}")
    print(f"X_test shape: {X_test_scaled.shape}")

    return X_train_final, y_train_final, X_test_scaled, scaler